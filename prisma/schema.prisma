// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Document {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String /// this will be in markdown, and rendered on the page
  author    Member   @relation(fields: [memberId], references: [id])
  memberId  Int
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
}

model Account {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  description String?
  funds       Float
  contacts    Member[] /// 0th contact is the primary
  records     Record[]
}

model Record {
  id                   Int                 @id @default(autoincrement())
  name                 String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  description          String?
  amount               Float
  project              Project?            @relation(fields: [projectId], references: [id])
  projectId            Int?
  Account              Account             @relation(fields: [accountId], references: [id])
  accountId            Int
  request              ExpendatureRequest? @relation(fields: [expendatureRequestId], references: [id])
  expendatureRequestId Int?
}

model ExpendatureRequest {
  id          Int      @id @default(autoincrement())
  name        String?
  description String?
  status      Status   @default(value: review)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  amount      Float
  items       String[]
  project     Project? @relation(fields: [projectId], references: [id])
  projectId   Int?
  Record      Record[]
}

model Picture {
  id        Int        @id @default(autoincrement())
  title     String?
  caption   String?
  data      String?
  url       String?
  isLocal   Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Article   Article[]
  BlogPost  BlogPost[]
  Project   Project[]
}

model BlogPost {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  upVotes   Int
  downVotes Int
  image     Picture? @relation(fields: [pictureId], references: [id])
  author    Member   @relation(fields: [memberId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pictureId Int?
  memberId  Int
}

model Article {
  id        Int      @id @default(autoincrement())
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  image     Picture? @relation(fields: [pictureId], references: [id])
  author    Member   @relation(fields: [authorId], references: [id])
  authorId  Int
  Project   Project? @relation(fields: [projectId], references: [id])
  projectId Int?
  pictureId Int?
}

model Project {
  id                 Int                  @id @default(autoincrement())
  title              String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  description        String
  logo               Picture?             @relation(fields: [pictureId], references: [id])
  budget             Float
  documents          Document[]
  remainingFunds     Float
  season             Season               @default(value: Fall)
  year               Int
  articles           Article[]
  members            Member[]
  pictureId          Int?
  Records            Record[]
  ExpendatureRequest ExpendatureRequest[]
}

model Member {
  id                Int        @id @default(autoincrement())
  firstName         String
  lastName          String?
  email             String     @unique
  passwordHash      String
  membershipExpDate DateTime   @default(now())
  joinedAt          DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  role              Role       @default(value: Member)
  Articles          Article[]
  Projects          Project[]
  BlogPost          BlogPost[]
  Account           Account?   @relation(fields: [accountId], references: [id])
  accountId         Int?
  Document          Document[]
}

model Sponsor {
  id          Int     @id @default(autoincrement())
  name        String
  receipt     Receipt @relation(fields: [receiptId], references: [id])
  description String?
  amount      Float?
  receiptId   Int
}

model Receipt {
  id      Int       @id @default(autoincrement())
  title   String
  Sponsor Sponsor[]
  // finish formatting with receipt template
}

enum Role {
  NonMember
  Member
  Teamlead
  Officer
  Alumni
  officerAlumni
}

enum Season {
  Summer
  Spring
  Fall
}

enum Status {
  approved
  review
  denied
}
